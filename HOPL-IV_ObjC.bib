
@book{hiltzik_dealers_1999,
	address = {New York},
	edition = {1st},
	title = {Dealers of Lightning : {Xerox} {PARC} and the Dawn of the Computer Age},
	isbn = {978-0-88730-891-8},
	shorttitle = {Dealers of Lightning},
	publisher = {HarperBusiness},
	author = {Hiltzik, Michael A.},
	year = {1999}
}


@book{cox_object-oriented_1986,
	address = {Reading, MA},
	edition = {1st ed.},
	title = {Object-{Oriented} {Programming}: {An} {Evolutionary} {Approach}},
	isbn = {0-201-10393-1},
	shorttitle = {Object-Oriented Programming},
	publisher = {Addison-Wesley},
	author = {Cox, Brad J.},
	year = {1986}
}

@book{cox_object-oriented_1991,
	address = {Reading, MA},
	edition = {2nd},
	title = {Object-{Oriented} {Programming}: {An} {Evolutionary} {Approach}},
	isbn = {978-0-201-54834-1},
	shorttitle = {Object-Oriented Programming},
	publisher = {Addison-Wesley},
	author = {Cox, Brad J. and Novobilski, Andrew J.},
	year = {1991}
}

@article{cox_producer:_1987,
	title = {Producer: A tool for translating Smalltalk-80 to Objective-C},
	volume = {22},
	abstract = {Source to source translation tools provide a way of integrating the strengths of production programming environments like C/UNIX™ with rapid prototyping environments like Smalltalk-80™ into a comprehensive hybrid environment that spans more of the software development life-spiral than ever before. This paper describes a tool-assisted process for translating Smalltalk-80 programs into Objective-C™, and shows how the tool, called Producer, is used in practice. To assist others in using this translation tool, we have made Producer publicly available without charge on USENET.},
	number = {12},
	journal = {SIGPLAN Not.},
	author = {Cox, Brad J. and Schmucker, Kurt J.},
	year = {1987},
	pages = {423--429},
	file = {p423-cox.pdf:/Library/Application Support/Zotero/Profiles/zotero/storage/XIANWTB4/p423-cox.pdf:application/pdf;Producer\: A tool for translating Smalltalk-80 to Objective-C:/Library/Application Support/Zotero/Profiles/zotero/storage/FPAQ966R/citation.html:text/html}
}

@article{cox_there_1990,
	title = {There is a silver bullet: A software industrial revolution based on reusable and interchangeable parts will alter the software universe},
	volume = {15},
	number = {10},
	journal = {Byte},
	author = {Cox, Brad J.},
	month = oct,
	year = {1990},
	pages = {209},
	file = {Cox - 1990 - There Is a Silver Bullet A software industrial re.pdf:/Library/Application Support/Zotero/Profiles/zotero/storage/GATFFWTG/Cox - 1990 - There Is a Silver Bullet A software industrial re.pdf:application/pdf}
}

@article{mahoney_roots_1990,
	title = {The roots of software engineering},
	volume = {3},
	number = {4},
	journal = {CWI Quarterly},
	author = {Mahoney, Michael S.},
	year = {1990},
	pages = {325--334},
	file = {sweroots.pdf:/Library/Application Support/Zotero/Profiles/zotero/storage/87J55CRT/sweroots.pdf:application/pdf}
}

@book{mackenzie_mechanizing_2001,
	address = {Cambridge, MA},
	title = {Mechanizing {Proof}: {Computing}, {Risk}, and {Trust}},
	isbn = {978-0-262-13393-7},
	shorttitle = {Mechanizing {Proof}},
	publisher = {MIT Press},
	author = {MacKenzie, Donald},
	year = {2001}
}

@article{cox_object_1983,
	title = {The object oriented pre-compiler: Programming {Smalltalk} 80 methods in {C} language},
	volume = {18},
	issn = {0362-1340},
	shorttitle = {The object oriented pre-compiler},
	url = {http://doi.acm.org/10.1145/948093.948095},
	doi = {10.1145/948093.948095},
	abstract = {This describes the Object Oriented Pre-Compiler, OOPC, a language and a run-time library for producing C programs that operate by the run-time conventions of Smalltalk 802 in a UNIX3 environment. These languages offer Object Oriented Programming in which data, and the programs which may access it, are designed, built and maintained as inseparable units called objects.The precompiler is backed by a library which supports Smalltalk 80's interpretation of messaging; binding of a message to its target routine is done at run time. The library also contains a growing number of primitive class definitions, such as an Object class whose capabilities are inherited by every object in the system. The library provides many, but not all, capabilities of Smalltalk. An added capability is object save/restore, which allows any object to convert itself and all sub-objects into linear form for storage on disk. Important missing features are automatic memory management and Smalltalk's impressive collection of classes to support a graphical human interface.},
	number = {1},
	urldate = {2013-03-11},
	journal = {SIGPLAN Not.},
	author = {Cox, Brad J.},
	month = jan,
	year = {1983},
	pages = {15--22},
	file = {Cox - 1983 - The object oriented pre-compiler programming Smal.pdf:/Library/Application Support/Zotero/Profiles/zotero/storage/CTASE6VD/Cox - 1983 - The object oriented pre-compiler programming Smal.pdf:application/pdf}
}

@article{mahoney_finding_2004,
	title = {Finding a history for software engineering},
	volume = {26},
	issn = {1058-6180},
	abstract = {Historians and software engineers are both looking for a history for software engineering. For historians, it is a matter of finding a point of perspective from which to view an enterprise that is still in the process of defining itself. For software engineers, it is the question of finding a usable past, as they have sought to ground their vision of the enterprise on historical models taken from science, engineering, industry, and the professions. We examine some of those models and their application to software engineering.},
	number = {1},
	journal = {Annals of the History of Computing, IEEE},
	author = {Mahoney, Michael S.},
	year = {2004},
	keywords = {enterprise, history, History, industry, professions, societies, software engineering, software engineering history},
	pages = {8--19},
	file = {IEEE Xplore Full Text PDF:/Library/Application Support/Zotero/Profiles/zotero/storage/U7QDCGQF/Mahoney - 2004 - Finding a history for software engineering.pdf:application/pdf}
}

@online{ram_dr._2003,
	title = {Dr. {Alan} {Kay} on the meaning of ``object-oriented programming''},
	copyright = {Copyright 2003 Stefan Ram, All rights reserved, copying, using and distribution only with prior written permission.},
	shorttitle = {Dr. {Alan} {Kay} on the meaning of ``object-oriented programming''},
	url = {http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en},
	abstract = {Dr. Alan Kay explains when ``object-oriented'' was first used and what it means.
[]},
	language = {en},
	urldate = {2014-04-02},
	author = {Ram, Stefan L.},
	month = jul,
	year = {2003},
	keywords = {Dr. Alan Kay on the meaning of ``object-oriented programming''},
	file = {Snapshot:/Library/Application Support/Zotero/Profiles/zotero/storage/4C5ZJXDX/doc_kay_oop_en.html:text/html}
}

@incollection{abbate_software_2012,
	address = {Cambridge, MA},
	title = {Software crisis or identity crisis? Gender, labor, and programming methods},
	isbn = {978-0-262-30546-4},
	abstract = {Today, women earn a relatively low percentage of computer science degrees and hold proportionately few technical computing jobs. Meanwhile, the stereotype of the male ``computer geek'' seems to be everywhere in popular culture. Few people know that women were a significant presence in the early decades of computing in both the United States and Britain. Indeed, programming in postwar years was considered woman's work (perhaps in contrast to the more manly task of building the computers themselves). In Recoding Gender, Janet Abbate explores the untold history of women in computer science and programming from the Second World War to the late twentieth century. Demonstrating how gender has shaped the culture of computing, she offers a valuable historical perspective on today's concerns over women's underrepresentation in the field. Abbate describes the experiences of women who worked with the earliest electronic digital computers: Colossus, the wartime codebreaking computer at Bletchley Park outside London, and the American ENIAC, developed to calculate ballistics. She examines postwar methods for recruiting programmers, and the 1960s redefinition of programming as the more masculine ``software engineering.'' She describes the social and business innovations of two early software entrepreneurs, Elsie Shutt and Stephanie Shirley; and she examines the career paths of women in academic computer science. Abbate's account of the bold and creative strategies of women who loved computing work, excelled at it, and forged successful careers will provide inspiration for those working to change gendered computing culture.},
	language = {English},
	urldate = {2014-06-27},
	booktitle = {Recoding {Gender}: {Women}'s {Changing} {Participation} in {Computing}},
	publisher = {MIT Press},
	author = {Abbate, Janet},
	year = {2012},
	pages = {73--111}
}

@book{slayton_arguments_2013,
	address = {Cambridge, MA},
	title = {Arguments that {Count}: {Physics}, {Computing}, and {Missile} {Defense}, 1949-2012},
	isbn = {978-1-4619-3901-6},
	language = {English},
	urldate = {2014-06-27},
	publisher = {The MIT Press},
	author = {Slayton, Rebecca},
	year = {2013}
}

@incollection{dijkstra_go_1979,
	address = {Upper Saddle River, NJ, USA},
	title = {Go to statement considered harmful},
	isbn = {0-917072-14-6},
	url = {http://dl.acm.org/citation.cfm?id=1241515.1241518},
	abstract = {To many people, Dijkstra's letter to the Editor of Communications of the A CM, published in March 1968, marks the true beginning of structured programming. That it influenced the industry is clear, if for no other reason than for the articles it spawned, ranging from ``IF-THEN-ELSE Considered Harmful,'' to ``The Else Must Go, Too,'' to ``Programming Considered Harmful.'' In form and content, Dijkstra's letter is similar to his 1965 paper, which appears first in this collection. Description of the inverse relationship between a programmer's ability and the density of goto statements in his program is repeated, as is the emphasis on the limited ability of the human brain. Much of the discussion is somewhat theoretical in nature, and the typical COBOL programmer will hunger for some coding examples so that he can see why goto statements make program logic harder to understand. Echoing his 1965 paper, the last few paragraphs underscore once again why the subject of structured programming stayed out of the mainstream of the data processing industry for so long. As Dijkstra points out, goto statements were a subject of discussion among academicians as far back as 1959. But even today, people whom Dijkstra acknowledges --- names like Wirth, Hoare, Strachey, and Landin --- are not well known to business-oriented or scientificoriented programmers, so it should be no surprise that their ideas have languished for so many years.},
	urldate = {2014-08-09},
	booktitle = {Classics in {Software} {Engineering}},
	publisher = {Yourdon Press},
	author = {Dijkstra, Edsger W.},
	editor = {Yourdon, Edward Nash},
	year = {1979},
	pages = {27--33}
}

@unpublished{haigh_dijkstras_2010,
	address = {Leiden},
	title = {Dijkstra's crisis: The end of {Algol} and the beginning of software engineering:1968--1972},
	url = {http://www.tomandmaria.com/tom/Writing/DijkstrasCrisis_LeidenDRAFT.pdf},
	booktitle = {Soft-{EU} {Project} {Meeting}},
	author = {Haigh, Thomas},
	month = sep,
	year = {2010}
}

@incollection{akera_software:_2002,
	address = {New York},
	title = {Software: The self-programming machine},
	isbn = {0-19-514025-7},
	shorttitle = {From 0 to 1},
	booktitle = {From 0 to 1: {An} {Authoritative} {History} of {Modern} {Computing}},
	publisher = {Oxford University Press},
	author = {Mahoney, Michael S.},
	editor = {Akera, Atsushi and Nebeker, Frederik},
	year = {2002},
	keywords = {Computer software, Computers},
	pages = {91--100}
}

@incollection{ensmenger_software_2002,
	address = {Berlin},
	title = {Software as labor process},
	isbn = {3-540-42664-7},
	shorttitle = {Software as labor process},
	booktitle = {History of {Computing}: {Software} {Issues}},
	publisher = {Springer},
	author = {Ensmenger, Nathan L. and Aspray, William},
	editor = {Hashagen, Ulf and Keil-Slawik, Reinhard and Norberg, Arthur L},
	collaborator = {Heinz Nixdorf MuseumsForum},
	year = {2002},
	keywords = {Computer software, Development, Electronic data processing, history, History},
	pages = {139--165},
	file = {Ensmenger2002.pdf:/Library/Application Support/Zotero/Profiles/zotero/storage/QRMVBC95/Ensmenger2002.pdf:application/pdf}
}

@book{brooks_mythical_1995,
	address = {Reading, MA},
	edition = {Anniversary},
	title = {The {Mythical} {Man}-{Month}: {Essays} on {Software} {Engineering}},
	isbn = {0-201-83595-9},
	shorttitle = {The {Mythical} {Man}-{Month}},
	publisher = {Addison-Wesley},
	author = {Brooks, Frederick P.},
	year = {1995},
	keywords = {software engineering}
}

@article{cox_planning_1990,
	title = {Planning the software industrial revolution},
	volume = {7},
	issn = {07407459},
	number = {6},
	urldate = {2009-05-12},
	journal = {IEEE Software},
	author = {Cox, Brad J.},
	month = nov,
	year = {1990},
	pages = {25},
	annote = {The author traces the US history of invention and technology transfer from the 1700s to the present and asks whether software development can stop being a process-centered cottage industry by the application of interchangeable parts technology. He maintains that a revolution is needed to accomplish this and outlines the steps of such a revolution. The author clarifies the meaning of object oriented, discusses the value rigidity trap, and provides a commercial example of the approach that he advocates.},
	file = {Cox 1990.pdf:/Library/Application Support/Zotero/Profiles/zotero/storage/DTGQZCI5/Cox 1990.pdf:application/pdf;Planning the Software Industrial Revolution:/Library/Application Support/Zotero/Profiles/zotero/storage/C75XWING/PSIR.html:text/html}
}

@online{cox_java_nodate,
	title = {Java was strongly influenced by {Objective}-{C}},
	url = {http://virtualschool.edu/objectivec/influenceOnJava.html},
	urldate = {2009-08-10},
	author = {Cox, Brad J.},
	file = {Java Was Strongly Influenced by Objective-C:/Library/Application Support/Zotero/Profiles/zotero/storage/56C65GJQ/influenceOnJava.html:text/html}
}

@article{brooks_no_1987,
	title = {No silver bullet: Essence and accidents of software engineering},
	volume = {20},
	issn = {0018-9162},
	doi = {10.1109/MC.1987.1663532},
	number = {4},
	journal = {Computer},
	author = {Brooks, Frederick P.},
	year = {1987},
	pages = {10--19},
	annote = { },
	file = {IEEE Xplore Full Text PDF:/Library/Application Support/Zotero/Profiles/zotero/storage/HR6NIR5I/Brooks - 1987 - No Silver Bullet Essence and Accidents of Software.pdf:application/pdf}
}

@inproceedings{stroustrup_history_1993,
	address = {Cambridge, MA},
	title = {A history of {C}++: 1979--1991},
	isbn = {0-89791-570-4},
	shorttitle = {A history of {C}++},
	url = {http://portal.acm.org/citation.cfm?id=155375},
	abstract = {This paper outlines the history of the C++ programming language. The emphasis is on the ideas, constraints, and people that shaped the language, rather than the minuitiae of language features. Key design decisions relating to language features are discussed, but the focus is on the overall design goals and practical constraints. The evolution of C++ is traced from C with Classes to the current ANSI and ISO standards work and the explosion of use, interest, commercial activity, compilers, tools, environments, and libraries.},
	urldate = {2009-04-30},
	booktitle = {The {Second} {ACM} {SIGPLAN} {Conference} on {History} of {Programming} {Languages}},
	publisher = {ACM},
	author = {Stroustrup, Bjarne},
	year = {1993},
	pages = {271--297},
	file = {ACM Snapshot:/Library/Application Support/Zotero/Profiles/zotero/storage/8TQ5UXVI/citation.html:text/html;hopl2.pdf:/Library/Application Support/Zotero/Profiles/zotero/storage/EBEWVCX4/hopl2.pdf:application/pdf;p271-stroustrup.pdf:/Library/Application Support/Zotero/Profiles/zotero/storage/C4V58WR7/p271-stroustrup.pdf:application/pdf}
}

@book{ensmenger_computer_2010,
	address = {Cambridge, MA},
	title = {The ``Computer Boys'' Take Over: Computers, Programmers, and the Politics of Technical Expertise},
	publisher = {MIT Press},
	author = {Ensmenger, Nathan L.},
	year = {2010},
	file = {ensmenger2009.pdf:/Users/hansnhsu/Documents/STS/Year 2/Spring 2009/History of Technology/History of Software-OOP Paper/Ensmenger/Papers/ensmenger2009.pdf:application/pdf}
}

@incollection{tomayko_software_2002,
	address = {Berlin},
	title = {Software as engineering},
	isbn = {3-540-42664-7},
	shorttitle = {History of {Computing}: {Software} {Issues}},
	booktitle = {History of {Computing}: {Software} {Issues}},
	publisher = {Springer},
	author = {Tomayko, James E.},
	editor = {Hashagen, Ulf and Keil-Slawik, Reinhard and Norberg, Arthur L},
	collaborator = {Heinz Nixdorf MuseumsForum},
	year = {2002},
	keywords = {Computer software, Development, Electronic data processing, history, History},
	pages = {139--165}
}

@inproceedings{cox_planning_1989,
	title = {Planning for software manufacturing},
	doi = {10.1109/CMPSAC.1989.65103},
	abstract = {It is argued that software is actually a hybrid at the intersection of two fundamentally different domains: the purely concrete plane of everyday physical, tangible experience and the purely abstract plane of intangible thought. The concrete plane is governed by well-understood laws of physics, and the abstract domain by its own laws of mathematics and logic. However, since software is a hybrid, the intersection of these two radically different domains, it does not fully abide by either set of laws. A high-level plan for winning the software industrial revolution is proposed. It is argued that it is necessary to deploy explicit specification tools, and new and largely unexplored kinds of tools. Their function is to gauge compliance between a given implementation of some part and the abstract specification of that part.{\textless}{\textless}ETX{\textgreater}{\textgreater}},
	booktitle = {[1989] {Proceedings} of the {Thirteenth} {Annual} {International} {Computer} {Software} {Applications} {Conference}},
	publisher = {IEEE},
    author = {Cox, Brad J.},
	month = sep,
	year = {1989},
	keywords = {abstract specification, Computer industry, Concrete, Encapsulation, Manufacturing industries, Object oriented programming, Programming profession, purely abstract plane, purely concrete plane, Silicon, software engineering, software industrial revolution, software manufacturing, Software reusability, Software standards, Software tools, specification tools},
	pages = {331--332},
	file = {Cox - 1989 - Planning for software manufacturing.pdf:/Library/Application Support/Zotero/Profiles/zotero/storage/HXCNAHAW/Cox - 1989 - Planning for software manufacturing.pdf:application/pdf;IEEE Xplore Abstract Record:/Library/Application Support/Zotero/Profiles/zotero/storage/PZ3NPPWI/65103.html:text/html}
}

@inproceedings{cox_objective-c_1988,
	title = {The {Objective}-{C} environment: Past, present, and future},
	shorttitle = {The {Objective}-{C} environment},
	doi = {10.1109/CMPCON.1988.4852},
	abstract = {The Objective-C environment, a growing collection of tools and reusable components (Software-ICs) for large-scale production system-building is discussed. Its goal is to make it possible for its users to build software systems in the way that hardware engineers build theirs, by reusing Software-ICs supplied by a marketplace in generic components rather than by building everything from scratch. The environment is based on conventional technology (C and Unix-style operating systems), which it includes and extends. The extensions presently include a complied and an interpreted implementation of Objective-C (an object-oriented programming language based on C) and several libraries of reusable components (ICpaks).{\textless}{\textless}ETX{\textgreater}{\textgreater}},
	booktitle = {Digest of {Papers}. {COMPCON} {Spring} 88 {Thirty}-{Third} {IEEE} {Computer} {Society} {International} {Conference}},
	publisher = {IEEE},
	author = {Cox, Brad J.},
	month = feb,
	year = {1988},
	keywords = {C language, Data structures, generic components, Hardware, ICpaks, large-scale production system-building, Large-scale systems, Object oriented programming, object-oriented programming language, objective-C environment, operating systems, Operating systems, Power system reliability, Production systems, Productivity, programming environments, Prototypes, reusable components, software engineering, Software tools, Software-ICs},
	pages = {166--169},
	file = {Cox - 1988 - The objective-C environment past, present, and fu.pdf:/Library/Application Support/Zotero/Profiles/zotero/storage/5Q35XD3U/Cox - 1988 - The objective-C environment past, present, and fu.pdf:application/pdf;IEEE Xplore Abstract Record:/Library/Application Support/Zotero/Profiles/zotero/storage/G3MXQ9XI/4852.html:text/html}
}

@article{cox_message/object_1984,
	title = {Message/object programming: An evolutionary change in programming technology},
	volume = {1},
	issn = {0740-7459},
	shorttitle = {Message/{Object} {Programming}},
	doi = {10.1109/MS.1984.233398},
	abstract = {Could a marriage of the message/object model, a la Smalltalk-80, and the operator/operand model, a la Unix, improve the lot of both users and programmers? Stay tuned...},
	number = {1},
	journal = {IEEE Software},
	author = {Cox, Brad J.},
	month = jan,
	year = {1984},
	pages = {50--61},
	file = {Cox - 1984 - MessageObject Programming An Evolutionary Change.pdf:/Library/Application Support/Zotero/Profiles/zotero/storage/S98YSKZK/Cox - 1984 - MessageObject Programming An Evolutionary Change.pdf:application/pdf;IEEE Xplore Abstract Record:/Library/Application Support/Zotero/Profiles/zotero/storage/9CYVZFYF/1695095.html:text/html}
}

@article{ledbetter_software-ics:_1985,
	title = {Software-{ICs}: {A} plan for building reusable software components},
	volume = {10},
	shorttitle = {Software-{ICs}},
	number = {6},
	journal = {Byte},
	author = {Ledbetter, Lamar and Cox, Brad J.},
	month = jun,
	year = {1985},
	pages = {307--316},
	file = {1985_06_BYTE_10-06_Programming_Techniques.pdf:/Users/hansnhsu/Public/Shared/CHM/Computer History Reference/Byte (from IA)/1985_06_BYTE_10-06_Programming_Techniques.pdf:application/pdf}
}

@article{cox_objects_1986,
	title = {Objects, icons, and software-{ICs}},
	volume = {11},
	number = {8},
	journal = {Byte},
	author = {Cox, Brad J. and Hunt, Bill},
	month = aug,
	year = {1986},
	pages = {161--176},
	file = {Cox and Hunt–Objects, Icons, and Software-ICs.pdf:/Users/hansnhsu/Public/Shared/CHM/Archive/Byte Aug 1986 OOP/Cox and Hunt–Objects, Icons, and Software-ICs.pdf:application/pdf}
}

@inproceedings{love_economics_1988,
	title = {The economics of reuse (of software)},
	doi = {10.1109/CMPCON.1988.4866},
	abstract = {The author argues that with current technology one cannot build the software that the market demands. Current approaches result in too little functionality and too many errors. Significant commercial experience now exists using object-oriented programming. He does an economic analysis of the use of object-oriented programming and concludes that it provides the technical key to higher productivity and quality.{\textless}{\textless}ETX{\textgreater}{\textgreater}},
	booktitle = {Digest of {Papers}. {COMPCON} {Spring} 88 {Thirty}-{Third} {IEEE} {Computer} {Society} {International} {Conference}},
	publisher = {IEEE},
	author = {Love, Tom},
	month = feb,
	year = {1988},
	keywords = {Buildings, Circuits, Computer aided software engineering, Data structures, Environmental economics, Object oriented programming, object-oriented programming, productivity, Productivity, programming, quality, Slabs, software engineering, software reuse, Switches, Testing},
	pages = {238--241},
	file = {IEEE Xplore Abstract Record:/Library/Application Support/Zotero/Profiles/zotero/storage/ZI5E93HE/4866.html:text/html;Love - 1988 - The economics of reuse (of software).pdf:/Library/Application Support/Zotero/Profiles/zotero/storage/C3NSGIM5/Love - 1988 - The economics of reuse (of software).pdf:application/pdf}
}

@article{boehm_software_1973,
	title = {Software and its impact: {A} quantitative assessment},
	volume = {19},
	number = {5},
	journal = {Datamation},
	author = {Boehm, Barry W.},
	month = may,
	year = {1973},
	pages = {48--59}
}

@inproceedings{cox_message/object_1983,
	address = {Arlington, VA},
	title = {The message/object programming model: {A} small change, at a deep conceptual level},
	isbn = {0-8186-0478-6},
	shorttitle = {The message/object programming model},
	abstract = {This is a tutorial on the programming style used in Smalltalk-80, and a personal history of the reasoning that has led me to pursue this style within conventional languages like C. It addresses the questions ``What is message/object programming?'', ``How is it different from conventional programming?'', and ``What can be gained by adopting it?''},
	booktitle = {Proceedings of {Softfair} '83},
	publisher = {IEEE Computer Society Press},
	author = {Cox, Brad J.},
	month = jul,
	year = {1983},
	pages = {51--60}
}

@inproceedings{love_experiences_1983,
	address = {Arlington, VA},
	title = {Experiences with {Smalltalk}-80 for application development},
	isbn = {0-8186-0478-6},
	shorttitle = {Experiences with {Smalltalk}-80 for application development},
	abstract = {This report describes initial experiences using a programming environment and language called Smalltalk-80 to develop an application using a highly graphic interface to a variety of diverse data. The particular data involved included electrical logs, core photographs, stratigraphic sketches, scanning electron micrographs, text reports, and scatter plots.
Smalltalk-80 has surpassed our initial expectations. Order of magnitude reductions in the bulk of code required for certain applications are achievable. Learning the language and user interface is quite easy, but the library of available methods is large (about 4 thousand methods) and often difficult to understand. The computational inefficiencies of the current implementation were not as severe a limitation as orginally anticipated.},
	booktitle = {Proceedings of {Softfair} '83},
	publisher = {IEEE Computer Society Press},
	author = {Love, Tom},
	month = jul,
	year = {1983},
	pages = {61--65}
}

@misc{love_skype_2019,
	title = {Skype interview with {Tom} {Love}, {April} 17, 2019},
	language = {English},
	author = {Love, Tom},
	collaborator = {Hsu, Hansen},
	month = apr,
	year = {2019}
}

@book{love_object_1995,
	address = {New York, NY},
	title = {Object {Lessons}: {Lessons} {Learned} in {Object}-{Oriented} {Development} {Projects}},
	isbn = {978-0-9627477-3-1},
	shorttitle = {Object lessons},
	language = {English},
	publisher = {SIGS Books},
	author = {Love, Tom},
	year = {1995},
	note = {OCLC: 612808297}
}

@incollection{biancuzzi_objective-c_2009,
	address = {Sebastopol, Calif.},
	edition = {1st},
	title = {Objective-{C}},
	isbn = {978-0-596-55094-3},
	language = {English},
	urldate = {2019-05-13},
	booktitle = {Masterminds of {Programming}},
	publisher = {O'Reilly Media},
	author = {Biancuzzi, Federico and Warden, Shane},
	year = {2009},
	note = {OCLC: 434042370},
	pages = {241--275}
}

@misc{cox_oral_2016,
	title = {Oral history of {Brad} {Cox}, {August} 2, 2016},
	url = {https://www.computerhistory.org/collections/catalog/102717175},
	author = {Cox, Brad J.},
	collaborator = {Hsu, Hansen},
	month = aug,
	year = {2016}
}

@book{goldberg_smalltalk-80_1983,
	address = {Reading, MA},
	title = {Smalltalk-80 : {The} {Language} and its {Implementation}},
	isbn = {978-0-201-11371-6},
	publisher = {Addison-Wesley},
	author = {Goldberg, Adele and Robson, David},
	year = {1983},
}

@book{krasner_smalltalk-80_1984,
	address = {Reading, MA},
	title = {Smalltalk-80: {Bits} of {History}, {Words} of {Advice}},
	isbn = {978-0-201-11669-4},
	language = {English},
	publisher = {Addison-Wesley},
	author = {Krasner, Glenn},
	year = {1984},
	note = {OCLC: 266966827}
}

@inproceedings{kay_early_1993,
	address = {Cambridge, MA},
	series = {{HOPL}-{II}},
	title = {The early history of {Smalltalk}},
	isbn = {0-89791-570-4},
	url = {http://dl.acm.org/citation.cfm?id=155364&CFID=812744934&CFTOKEN=55269295},
	doi = {10.1145/154766.155364},
	abstract = {Most ideas come from previous ideas. The sixties, particularly in the ARPA community, gave rise to a host of notions about ``human-computer symbiosis'' through interactive time-shared computers, graphics screens and pointing devices. Advanced computer languages were invented to simulate complex systems such as oil refineries and semi-intelligent behavior. The soon to follow paradigm shift of modern personal computing, overlapping window interfaces, and object-oriented design came from seeing the work of the sixties as something more than a ``better old thing''. That is, more than a better way: to do mainframe computing; for end-users to invoke functionality; to make data structures more abstract. Instead the promise of exponential growth in computing/\$/volume demanded that the sixties be regarded as ``almost a new thing'' and to find out what the actual ``new things'' might be. For example, one would compute with a handheld ``Dynabook'' in a way that would not be possible on a shared mainframe; millions of potential users meant that the user interface would have to become a learning environment along the lines of Montessori and Bruner; and needs for large scope, reduction in complexity, and end-user literacy would require that data and control structures be done away with in favor of a more biological scheme of protected universal cells interacting only through messages that could mimic any desired behavior. Early Smalltalk was the first complete realization of these new points of view as parented by its many predecessors in hardware, language and user interface design. It became the exemplar of the new computing, in part, because we were actually trying for a qualitative shift in belief structures—a new Kuhnian paradigm in the same spirit as the invention of the printing press—and thus took highly extreme positions which almost forced these new styles to be invented.},
	urldate = {2009-05-11},
	booktitle = {The {Second} {ACM} {SIGPLAN} {Conference} on {History} of {Programming} {Languages}},
	publisher = {ACM},
	author = {Kay, Alan C.},
	year = {1993},
	note = {ACM ID: 155364},
	pages = {69--95},
	file = {ACM Snapshot:/Library/Application Support/Zotero/Profiles/zotero/storage/PRFCT9U3/citation.html:text/html;Kay - 1993 - The Early History of Smalltalk.pdf:/Library/Application Support/Zotero/Profiles/zotero/storage/R7UAHQEP/Kay - 1993 - The Early History of Smalltalk 2.pdf:application/pdf}
}

@article{xerox_learning_research_group_smalltalk-80_1981,
	title = {The {Smalltalk}-80 system},
	volume = {6},
	language = {English},
	number = {8},
	journal = {Byte},
	author = {{Xerox Learning Research Group}},
	month = aug,
	year = {1981},
	pages = {36--48},
	file = {Byte Aug-1981 Smalltalk Articles Only.pdf:/Users/hansnhsu/Public/Shared/CHM/Archive/Byte Aug 1981 Smalltalk/Byte Aug-1981 Smalltalk Articles Only.pdf:application/pdf}
}

@article{kaehler_small_1986,
	title = {A small taste of {Smalltalk}},
	volume = {11},
	number = {8},
	journal = {Byte},
	author = {Kaehler, Ted and Patterson, Dave},
	month = aug,
	year = {1986},
	pages = {145--158},
	file = {Kaehler and Patterson–A Taste of Smalltalk.pdf:/Users/hansnhsu/Public/Shared/CHM/Archive/Byte Aug 1986 OOP/Kaehler and Patterson–A Taste of Smalltalk.pdf:application/pdf}
}

@article{tesler_programming_1986,
	title = {Programming experiences},
	volume = {11},
	number = {8},
	journal = {Byte},
	author = {Tesler, Larry},
	month = aug,
	year = {1986},
	pages = {195--206},
	file = {Tesler-Programming Experiences.pdf:/Users/hansnhsu/Public/Shared/CHM/Archive/Byte Aug 1986 OOP/Tesler-Programming Experiences.pdf:application/pdf}
}

@article{schmucker_object-oriented_1986,
	title = {Object-oriented languages for the {Macintosh}},
	volume = {11},
	number = {8},
	journal = {Byte},
	author = {Schmucker, Kurt J.},
	month = aug,
	year = {1986},
	pages = {177--185},
	file = {Schmucker–Object-Oriented Languages for the Macintosh.pdf:/Users/hansnhsu/Public/Shared/CHM/Archive/Byte Aug 1986 OOP/Schmucker–Object-Oriented Languages for the Macintosh.pdf:application/pdf}
}

@article{schmucker_macapp:_1986,
	title = {{MacApp}: {An} application framework},
	volume = {11},
	number = {8},
	journal = {Byte},
	author = {Schmucker, Kurt J.},
	month = aug,
	year = {1986},
	pages = {189--193},
	file = {Schmucker–MacApp.pdf:/Users/hansnhsu/Public/Shared/CHM/Archive/Byte Aug 1986 OOP/Schmucker–MacApp.pdf:application/pdf}
}

@misc{tesler_oral_2016,
	title = {Oral history of {Larry} {Tesler}, {Part} 2, {December} 16, 2016},
	author = {Tesler, Larry},
	collaborator = {Hsu, Hansen and Brock, David C.},
	month = dec,
	year = {2016}
}

@article{verity_oops_1987,
	title = {The {OOPS} revolution},
	volume = {33},
	journal = {Datamation},
	author = {Verity, John W.},
	month = may,
	year = {1987},
	pages = {72--78}
}

@article{verity_software_1991,
	title = {Software made simple},
	journal = {BusinessWeek},
	author = {Verity, John W. and Schwartz, Evan I.},
	month = sep,
	year = {1991},
	pages = {92--100}
}

@misc{cringely_steve_2012,
	title = {Steve {Jobs} - {The} {Lost} {Interview}},
	url = {https://www.youtube.com/watch?v=TRZAJY23xio},
	author = {Cringely, Robert X.},
	month = may,
	year = {2012}
}

@article{white_object-oriented_1986,
	title = {Object-oriented programming},
	volume = {11},
	number = {8},
	journal = {Byte},
	author = {White, Eva and Malloy, Rich},
	month = aug,
	year = {1986},
	pages = {137}
}

@misc{love_e-mail_2019,
	title = {E-mail with {Tom} {Love}, {June} 1, 2019, {Subject}: {Yesterday}'s {Questions}},
	author = {Love, Tom},
	month = jun,
	year = {2019}
}

@misc{gosling_oral_2019,
	title = {Oral history of {James} {Gosling}, {Part} 2, {April} 22, 2019},
	language = {English},
	author = {Gosling, James},
	collaborator = {Hsu, Hansen and Weber, Marc},
	month = apr,
	year = {2019}
}

@misc{naroff_design_1987,
	title = {Design issues for {Objective}-{C} v.?.? {DRAFT}},
	abstract = {This document is a general review of the Objective-C language based on the desires of current and prospective customers, and PPI technical staff.},
	publisher = {Productivity Products International},
	author = {Naroff, Steve and Watt, Alan},
	month = jul,
	year = {1987}
}

@misc{naroff_oral_2018,
	title = {Oral history of {Steve} {Naroff}, {October} 8, 2018},
	url = {https://www.computerhistory.org/collections/catalog/102717385},
	author = {Naroff, Steve},
	collaborator = {Hsu, Hansen},
	month = oct,
	year = {2018}
}

@misc{garst_oral_2016,
	title = {Oral history of {Blaine} {Garst}, {Part} 1, {July} 25, 2016},
	url = {https://www.computerhistory.org/collections/catalog/102717171},
	author = {Garst, Blaine},
	collaborator = {Hsu, Hansen},
	month = jul,
	year = {2016}
}

@online{microsoft_extension_2015,
	title = {Extension {Methods} --- {C}\# {Programming} {Guide}},
	url = {https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods},
	language = {en-us},
	urldate = {2019-08-02},
	journal = {C\# Guide},
	author = {{Microsoft}},
	month = jul,
	year = {2015},
	file = {Snapshot:/Library/Application Support/Zotero/Profiles/zotero/storage/DEN4GPH6/extension-methods.html:text/html}
}